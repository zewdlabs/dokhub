// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id String @id @default(cuid())

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  content String

  role MessageRole

  createdAt DateTime @default(now())

  @@map("messages")
}

model Chat {
  id    String  @id @default(cuid())
  title String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  Message Message[]

  createdAt DateTime @default(now())

  @@map("chats")
}

model User {
  id String @id @default(cuid())

  email                String             @unique
  name                 String
  prefix               String?
  password             String?
  phone                String?
  bio                  String?
  occupation           String?
  specialty            String?
  medicalLicenseNumber String?
  yearsOfExperience    Int?
  refreshToken         String?
  verificationStatus   VerificationStatus @default(INCOMPLETE)
  role                 Role               @default(USER)

  socialLinks     SocialLink[]
  memberships     Membership[]
  invitations     Invitation[]
  // subscriptions     Subscription[]
  tags            Tag[]
  posts           Post[]       @relation("author")
  likes           PostLike[]
  followedBy      Follows[]    @relation("followedBy")
  followedByCount Int          @default(0)
  following       Follows[]    @relation("following")
  followingCount  Int          @default(0)
  profileUrl      String?
  emailVerified   DateTime?

  forYou ForYou[]

  emailVerification EmailVerification?
  passwordReset     PasswordReset?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Chat      Chat[]
  Library   Library[]

  onboardingStatus Boolean @default(false)

  @@index([email])
  @@map("users")
}

model Membership {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role OrganizationRole

  @@unique([userId, organizationId], name: "unique_membership")
  @@index([userId, organizationId], name: "unique_membership")
  @@map("memberships")
}

model Follows {
  followedBy   User   @relation("followedBy", fields: [followedById], references: [id], onDelete: Cascade)
  followedById String
  following    User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId  String

  createdAt DateTime @default(now())

  @@id([followingId, followedById])
  @@index([followedById, followingId], name: "unique_follows")
  @@map("follows")
}

model EmailVerification {
  id String @id @default(cuid())

  code String @unique

  email String @unique

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime @default(dbgenerated("now() + interval '3 day'"))

  @@index([userId, code, email])
  @@map("email_verifications")
}

model PasswordReset {
  id String @id @default(cuid())

  token  String @unique
  email  String @unique
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime @default(dbgenerated("now() + interval '1 day'"))

  @@index([userId, token, email], name: "unique_password_reset")
  @@map("password_resets")
}

// try to add collaborators
model Post {
  id          String    @id @default(cuid())
  title       String
  postImage   String?
  description String?
  content     String
  publishedAt DateTime?

  reportedAmount Int      @default(0)
  minToRead      String?
  public         Boolean? @default(true)

  author   User   @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  replyToPost   Post?   @relation("ReplyToPost", fields: [replyToPostId], references: [id])
  replyToPostId String?

  replies          Post[] @relation("ReplyToPost")
  postRepliesCount Int    @default(0)

  postLikes     PostLike[]
  postLikeCount Int        @default(0)

  tags Tag[]

  // If not public, only author, collaborators and specified organizations can see it
  postAccessOrgs Organization[]
  forYou         ForYou[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Library Library[]

  @@index([authorId])
  @@map("posts")
}

model PostLike {
  id String @id @default(cuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId, userId], name: "unique_post_like")
  @@map("post_likes")
}

model Tag {
  id   String @id @default(cuid())
  name String @unique

  posts      Post[]
  postsCount Int    @default(0)

  usersSubscribed      User[]
  usersSubscribedCount Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map("tags")
}

// enum for common social media links
model SocialLink {
  id String @id @default(cuid())

  username String  @unique
  url      String? @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  type SocialLinkType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, username, url], name: "unique_social_link")
  @@map("social_links")
}

model Organization {
  id       String  @id @default(cuid())
  name     String
  slug     String  @unique
  location String?

  institutionLicenseNumber String?

  invitations Invitation[]
  memberships Membership[]
  posts       Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@map("organizations")
}

model Invitation {
  id String @id @default(cuid())

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  role Role

  user   User   @relation(fields: [userId], references: [id])
  userId String

  status InvitationStatus @default(PENDING)

  expirationDate DateTime @default(dbgenerated("now() + interval '7 days'"))

  @@index([organizationId, userId], name: "unique_invitation")
  @@map("invitations")
}

model ForYou {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("for_you")
}

model Library {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId], name: "unique_library")
  @@map("libraries")
}

//TODO: Think on this a bit more
// model Subscription {
//   id String @id @default(cuid())
//
//   userId String
//   user   User   @relation(fields: [userId], references: [id])
//
//   expiresAt DateTime @default(dbgenerated("now() + interval '1 month'"))
//
//   subscriptionType SubscriptionType @default(PRO)
//
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   @@index([userId])
//   @@map("subscriptions")
// }

enum SocialLinkType {
  TWITTER
  LINKEDIN
  GITHUB
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  TIKTOK
  OTHER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum VerificationStatus {
  INCOMPLETE
  PENDING
  REVIEW
  VERIFIED
  REJECTED
}

enum SubscriptionType {
  PRO
  ENTERPRISE
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SUSPENDED
}

enum OrganizationRole {
  ADMIN
  MEMBER
  OWNER
}

enum Role {
  SUADMIN
  CREATOR
  ADMIN
  USER
}

enum MessageRole {
  user
  assistant
  system
}
